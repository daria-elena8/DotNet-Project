// <auto-generated />
using System;
using DotnetProjectAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DotnetProjectAPI.Migrations
{
    [DbContext(typeof(projectContext))]
    [Migration("20240902202459_AddedAuth")]
    partial class AddedAuth
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DotnetProjectAPI.Models.Comment", b =>
                {
                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("placeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("dateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("userId", "placeId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("DotnetProjectAPI.Models.Like", b =>
                {
                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("placeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("dateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("userId", "placeId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("DotnetProjectAPI.Models.Place", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("dateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("DotnetProjectAPI.Models.PlaceRating", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("dateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("placeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("rating")
                        .HasColumnType("float");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("placeId")
                        .IsUnique();

                    b.ToTable("PlaceRatings");
                });

            modelBuilder.Entity("DotnetProjectAPI.Models.User", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("dateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("role")
                        .HasColumnType("int");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DotnetProjectAPI.Models.Visit", b =>
                {
                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("placeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PlaceRatingid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("dateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("rating")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userId", "placeId");

                    b.HasIndex("PlaceRatingid");

                    b.HasIndex("placeId");

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("DotnetProjectAPI.Models.Comment", b =>
                {
                    b.HasOne("DotnetProjectAPI.Models.User", "user")
                        .WithMany("comments")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DotnetProjectAPI.Models.Visit", "visit")
                        .WithMany("comments")
                        .HasForeignKey("userId", "placeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("user");

                    b.Navigation("visit");
                });

            modelBuilder.Entity("DotnetProjectAPI.Models.Like", b =>
                {
                    b.HasOne("DotnetProjectAPI.Models.User", "user")
                        .WithMany("likes")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DotnetProjectAPI.Models.Visit", "visit")
                        .WithMany("likes")
                        .HasForeignKey("userId", "placeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");

                    b.Navigation("visit");
                });

            modelBuilder.Entity("DotnetProjectAPI.Models.PlaceRating", b =>
                {
                    b.HasOne("DotnetProjectAPI.Models.Place", "place")
                        .WithOne("placeRating")
                        .HasForeignKey("DotnetProjectAPI.Models.PlaceRating", "placeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("place");
                });

            modelBuilder.Entity("DotnetProjectAPI.Models.Visit", b =>
                {
                    b.HasOne("DotnetProjectAPI.Models.PlaceRating", null)
                        .WithMany("visits")
                        .HasForeignKey("PlaceRatingid");

                    b.HasOne("DotnetProjectAPI.Models.Place", "place")
                        .WithMany("visits")
                        .HasForeignKey("placeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DotnetProjectAPI.Models.User", "user")
                        .WithMany("visits")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("place");

                    b.Navigation("user");
                });

            modelBuilder.Entity("DotnetProjectAPI.Models.Place", b =>
                {
                    b.Navigation("placeRating")
                        .IsRequired();

                    b.Navigation("visits");
                });

            modelBuilder.Entity("DotnetProjectAPI.Models.PlaceRating", b =>
                {
                    b.Navigation("visits");
                });

            modelBuilder.Entity("DotnetProjectAPI.Models.User", b =>
                {
                    b.Navigation("comments");

                    b.Navigation("likes");

                    b.Navigation("visits");
                });

            modelBuilder.Entity("DotnetProjectAPI.Models.Visit", b =>
                {
                    b.Navigation("comments");

                    b.Navigation("likes");
                });
#pragma warning restore 612, 618
        }
    }
}
